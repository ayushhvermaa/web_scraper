{"ast":null,"code":"import React, { useState } from 'react';\nimport axios from 'axios';\nimport FormData from 'form-data';\nconst OPENAI_API_KEY = process.env.REACT_APP_API_KEY;\nconst model = \"whisper-1\";\nasync function Transcribe(file) {\n  const formData = new FormData();\n  const [transcription, setTranscription] = useState(\"\");\n  formData.append(\"model\", model);\n  formData.append(\"file\", file);\n  axios.post(\"https://api.openai.com/v1/audio/transcriptions\", formData, {\n    headers: {\n      Authorization: `Bearer ${OPENAI_API_KEY}`,\n      \"Content-Type\": `multipart/form-data\"; boundary =${formData._boundary}`\n    }\n  }).then(response => {\n    console.log(response.data);\n    setTranscription(response.data);\n  }).catch(error => {\n    console.error(error);\n  });\n}\nexport default Transcribe;","map":{"version":3,"names":["React","useState","axios","FormData","OPENAI_API_KEY","process","env","REACT_APP_API_KEY","model","Transcribe","file","formData","transcription","setTranscription","append","post","headers","Authorization","_boundary","then","response","console","log","data","catch","error"],"sources":["C:/Users/chris/sync2/sync/sync-project/src/Transcribe.js"],"sourcesContent":["import React, { useState } from 'react';\r\nimport axios from 'axios';\r\nimport FormData from 'form-data';\r\nconst OPENAI_API_KEY = process.env.REACT_APP_API_KEY;\r\nconst model = \"whisper-1\";\r\n\r\n\r\nasync function Transcribe(file) {\r\n    const formData = new FormData();\r\n    const [transcription, setTranscription] = useState(\"\");\r\n    formData.append(\"model\", model);\r\n    formData.append(\"file\", file);\r\n\r\n    axios\r\n    .post(\"https://api.openai.com/v1/audio/transcriptions\", formData,{\r\n        headers: {\r\n            Authorization: `Bearer ${OPENAI_API_KEY}`,\r\n            \"Content-Type\": `multipart/form-data\"; boundary =${formData._boundary}`,\r\n        },\r\n    })\r\n    .then((response) => {\r\n        console.log(response.data);\r\n        setTranscription(response.data);\r\n\r\n    })\r\n    .catch((error) => {\r\n        console.error(error);\r\n    });\r\n}\r\n\r\nexport default Transcribe;\r\n\r\n"],"mappings":"AAAA,OAAOA,KAAK,IAAIC,QAAQ,QAAQ,OAAO;AACvC,OAAOC,KAAK,MAAM,OAAO;AACzB,OAAOC,QAAQ,MAAM,WAAW;AAChC,MAAMC,cAAc,GAAGC,OAAO,CAACC,GAAG,CAACC,iBAAiB;AACpD,MAAMC,KAAK,GAAG,WAAW;AAGzB,eAAeC,UAAUA,CAACC,IAAI,EAAE;EAC5B,MAAMC,QAAQ,GAAG,IAAIR,QAAQ,CAAC,CAAC;EAC/B,MAAM,CAACS,aAAa,EAAEC,gBAAgB,CAAC,GAAGZ,QAAQ,CAAC,EAAE,CAAC;EACtDU,QAAQ,CAACG,MAAM,CAAC,OAAO,EAAEN,KAAK,CAAC;EAC/BG,QAAQ,CAACG,MAAM,CAAC,MAAM,EAAEJ,IAAI,CAAC;EAE7BR,KAAK,CACJa,IAAI,CAAC,gDAAgD,EAAEJ,QAAQ,EAAC;IAC7DK,OAAO,EAAE;MACLC,aAAa,EAAG,UAASb,cAAe,EAAC;MACzC,cAAc,EAAG,mCAAkCO,QAAQ,CAACO,SAAU;IAC1E;EACJ,CAAC,CAAC,CACDC,IAAI,CAAEC,QAAQ,IAAK;IAChBC,OAAO,CAACC,GAAG,CAACF,QAAQ,CAACG,IAAI,CAAC;IAC1BV,gBAAgB,CAACO,QAAQ,CAACG,IAAI,CAAC;EAEnC,CAAC,CAAC,CACDC,KAAK,CAAEC,KAAK,IAAK;IACdJ,OAAO,CAACI,KAAK,CAACA,KAAK,CAAC;EACxB,CAAC,CAAC;AACN;AAEA,eAAehB,UAAU"},"metadata":{},"sourceType":"module"}
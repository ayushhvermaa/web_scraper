{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\chris\\\\sync2\\\\sync\\\\sync-project\\\\src\\\\App.js\";\nimport React from 'react';\nimport './App.css';\nimport transcribe from \"./Example\";\nconst fs = require('fs');\n\n/*\r\nfunction App() {\r\n  const [file, setFile] = useState(null);\r\n  const [transcription, setTranscription] = useState('');\r\n\r\n  async function handleFileChange(event) {\r\n    const selectedFile = event.target.files[0];\r\n    if (selectedFile) {\r\n      setFile(selectedFile);\r\n      const formData = new FormData();\r\n      formData.append('file', selectedFile);\r\n      try {\r\n        const response = await fetch('http://localhost:3001/transcribe', {\r\n          method: 'POST',\r\n          body: formData,\r\n        });\r\n        if (response.ok) {\r\n          const data = await response.json();\r\n          setTranscription(data.transcription);\r\n        } else {\r\n          const data = await response.json();\r\n          console.error(\"Error from server:\", data.message);\r\n        }\r\n      } catch (error) {\r\n        console.error(\"Error processing file:\", error);\r\n      }\r\n    }\r\n  }\r\n\r\n  function downloadTranscription() {\r\n    const element = document.createElement(\"a\");\r\n    const file = new Blob([transcription], { type: 'text/plain' });\r\n    element.href = URL.createObjectURL(file);\r\n    element.download = \"transcription.txt\";\r\n    document.body.appendChild(element);\r\n    element.click();\r\n  }\r\n*/\nfunction App() {\n  async function testTranscribe(file) {\n    const transcript = await transcribe(file);\n    console.log(transcript);\n  }\n  async function handleFileChange(event) {\n    const selectedFile = event.target.files[0];\n    if (selectedFile) {\n      transcribe(selectedFile);\n    }\n  }\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: \"App\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 61,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"center-container\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 62,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"h1\", {\n    className: \"sync-title\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 63,\n      columnNumber: 5\n    }\n  }, \"Sync\"), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"search-bar\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 64,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"input\", {\n    type: \"file\",\n    accept: \".mp3,.mp4\",\n    onChange: handleFileChange,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 65,\n      columnNumber: 5\n    }\n  }), /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 66,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"button\", {\n    onClick: testTranscribe,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 67,\n      columnNumber: 7\n    }\n  }, \"test Transcribe\")))));\n}\nexport default App;","map":{"version":3,"names":["React","transcribe","fs","require","App","testTranscribe","file","transcript","console","log","handleFileChange","event","selectedFile","target","files","createElement","className","__self","__source","fileName","_jsxFileName","lineNumber","columnNumber","type","accept","onChange","onClick"],"sources":["C:/Users/chris/sync2/sync/sync-project/src/App.js"],"sourcesContent":["import React from 'react'\r\nimport './App.css';\r\nimport transcribe from \"./Example\";\r\nconst fs = require('fs');\r\n\r\n\r\n\r\n/*\r\nfunction App() {\r\n  const [file, setFile] = useState(null);\r\n  const [transcription, setTranscription] = useState('');\r\n\r\n  async function handleFileChange(event) {\r\n    const selectedFile = event.target.files[0];\r\n    if (selectedFile) {\r\n      setFile(selectedFile);\r\n      const formData = new FormData();\r\n      formData.append('file', selectedFile);\r\n      try {\r\n        const response = await fetch('http://localhost:3001/transcribe', {\r\n          method: 'POST',\r\n          body: formData,\r\n        });\r\n        if (response.ok) {\r\n          const data = await response.json();\r\n          setTranscription(data.transcription);\r\n        } else {\r\n          const data = await response.json();\r\n          console.error(\"Error from server:\", data.message);\r\n        }\r\n      } catch (error) {\r\n        console.error(\"Error processing file:\", error);\r\n      }\r\n    }\r\n  }\r\n\r\n  function downloadTranscription() {\r\n    const element = document.createElement(\"a\");\r\n    const file = new Blob([transcription], { type: 'text/plain' });\r\n    element.href = URL.createObjectURL(file);\r\n    element.download = \"transcription.txt\";\r\n    document.body.appendChild(element);\r\n    element.click();\r\n  }\r\n*/\r\nfunction App() {\r\n\r\n  async function testTranscribe(file){\r\n    const transcript = await transcribe(file);\r\n    console.log(transcript);\r\n  }\r\n\r\n  async function handleFileChange(event) {\r\n    const selectedFile = event.target.files[0];\r\n    if (selectedFile) {\r\n      transcribe(selectedFile)\r\n    }\r\n  }\r\n         \r\n  return (\r\n    <div className=\"App\">\r\n    <div className=\"center-container\">\r\n    <h1 className=\"sync-title\">Sync</h1>\r\n    <div className=\"search-bar\"> \r\n    <input type=\"file\" accept=\".mp3,.mp4\" onChange={handleFileChange} />\r\n    <div>\r\n      <button onClick={testTranscribe}>test Transcribe</button>\r\n      </div>     \r\n    </div>\r\n    </div>\r\n    </div>\r\n    );\r\n    }\r\n\r\nexport default App;"],"mappings":";AAAA,OAAOA,KAAK,MAAM,OAAO;AACzB,OAAO,WAAW;AAClB,OAAOC,UAAU,MAAM,WAAW;AAClC,MAAMC,EAAE,GAAGC,OAAO,CAAC,IAAI,CAAC;;AAIxB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAASC,GAAGA,CAAA,EAAG;EAEb,eAAeC,cAAcA,CAACC,IAAI,EAAC;IACjC,MAAMC,UAAU,GAAG,MAAMN,UAAU,CAACK,IAAI,CAAC;IACzCE,OAAO,CAACC,GAAG,CAACF,UAAU,CAAC;EACzB;EAEA,eAAeG,gBAAgBA,CAACC,KAAK,EAAE;IACrC,MAAMC,YAAY,GAAGD,KAAK,CAACE,MAAM,CAACC,KAAK,CAAC,CAAC,CAAC;IAC1C,IAAIF,YAAY,EAAE;MAChBX,UAAU,CAACW,YAAY,CAAC;IAC1B;EACF;EAEA,oBACEZ,KAAA,CAAAe,aAAA;IAAKC,SAAS,EAAC,KAAK;IAAAC,MAAA;IAAAC,QAAA;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA;EAAA,gBACpBtB,KAAA,CAAAe,aAAA;IAAKC,SAAS,EAAC,kBAAkB;IAAAC,MAAA;IAAAC,QAAA;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA;EAAA,gBACjCtB,KAAA,CAAAe,aAAA;IAAIC,SAAS,EAAC,YAAY;IAAAC,MAAA;IAAAC,QAAA;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA;EAAA,GAAC,MAAQ,CAAC,eACpCtB,KAAA,CAAAe,aAAA;IAAKC,SAAS,EAAC,YAAY;IAAAC,MAAA;IAAAC,QAAA;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA;EAAA,gBAC3BtB,KAAA,CAAAe,aAAA;IAAOQ,IAAI,EAAC,MAAM;IAACC,MAAM,EAAC,WAAW;IAACC,QAAQ,EAAEf,gBAAiB;IAAAO,MAAA;IAAAC,QAAA;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA;EAAA,CAAE,CAAC,eACpEtB,KAAA,CAAAe,aAAA;IAAAE,MAAA;IAAAC,QAAA;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA;EAAA,gBACEtB,KAAA,CAAAe,aAAA;IAAQW,OAAO,EAAErB,cAAe;IAAAY,MAAA;IAAAC,QAAA;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA;EAAA,GAAC,iBAAuB,CACnD,CACF,CACA,CACA,CAAC;AAEN;AAEJ,eAAelB,GAAG"},"metadata":{},"sourceType":"module"}